version: "3.8"
services:
  db:
    image: mysql:8.3.0
    environment:
        MYSQL_ROOT_PASSWORD_FILE: "/run/secrets/db_password"
        MYSQL_PASSWORD_FILE: "/run/secrets/db_password"
        MYSQL_USER: "sholex"
        MYSQL_DATABASE: "lilsholex"
    secrets:
      - db_password
    healthcheck:
      test: mysqladmin -u root --password=`cat $MYSQL_ROOT_PASSWORD_FILE` ping
      interval: 10s
      retries: 3
      timeout: 10s
      start_period: 1m
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.db==true
      restart_policy:
        condition: any
        max_attempts: 3
        window: 20s
        delay: 10s
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: rollback
        monitor: 10s
        order: stop-first
      rollback_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
        monitor: 10s
        order: stop-first
    networks:
      - db_django
    volumes:
      - type: volume
        source: db
        target: /var/lib/mysql
    configs:
      - source: mysql_3
        target: /etc/mysql/conf.d/mysql.cnf
  rabbitmq:
    image: rabbitmq:3.12.12
    healthcheck:
      test: "rabbitmq-diagnostics -q ping"
      interval: 10s
      timeout: 5s
      start_period: 1m
      retries: 3
    networks:
      - tasks_django
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.task_master==true
      restart_policy:
        condition: any
        max_attempts: 3
        window: 20s
        delay: 10s
      update_config:
        parallelism: 1
        delay: 2s
        failure_action: rollback
        monitor: 10s
        order: stop-first
      rollback_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
        monitor: 10s
        order: stop-first
    volumes:
      - type: volume
        source: rabbitmq_dump
        target: /var/lib/rabbitmq
    configs:
      - source: rabbitmq
        target: /etc/rabbitmq/rabbitmq.conf
  nginx:
    image: ghcr.io/sholex-team/nginx:4.3
    networks:
      - nginx_lilsholex
    ports:
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    healthcheck:
      test: python3 nginx.py
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 3
    depends_on:
      - lilsholex
      - celery_flower
    volumes:
      - ./static:/root/lilsholex/static:ro
      - type: volume
        source: nginx
        target: /var/log/nginx
    deploy:
      replicas: 1
      placement:
        preferences:
          - spread: node.labels.zone
        constraints:
          - node.labels.nginx==true
      restart_policy:
        condition: any
        max_attempts: 3
        window: 10s
        delay: 5s
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: rollback
        monitor: 10s
        order: stop-first
      rollback_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
        monitor: 10s
        order: stop-first
    configs:
      - source: nginx
        target: /etc/nginx/nginx.conf
    secrets:
      - ssl_certificate
      - ssl_key
      - dhparam
  lilsholex:
    image: ghcr.io/sholex-team/lilsholex:5.8
    networks:
      - db_django
      - nginx_lilsholex
      - cache_django
      - django_internet
      - tasks_django
    secrets:
      - db_password
      - persianmeme_channel
      - persianmeme_reports
      - persianmeme_help_messages
      - persianmeme_token
      - secret_key
      - webhook_token
      - persianmeme_logs
      - persianmeme_messages
      - domain
    depends_on:
      - db
      - migrations
    healthcheck:
      test: python healthchecks/gunicorn.py
      interval: 15s
      timeout: 5s
      start_period: 30s
      retries: 3
    deploy:
      replicas: 4
      placement:
        preferences:
           - spread: node.labels.zone
        constraints:
          - node.labels.webserver==true
      update_config:
        parallelism: 2
        delay: 5s
        failure_action: rollback
        monitor: 5s
        order: start-first
      rollback_config:
        parallelism: 2
        delay: 5s
        failure_action: pause
        monitor: 10s
        order: stop-first
      restart_policy:
        condition: any
        max_attempts: 3
        window: 10s
        delay: 5s
  celery: &celery_base
    image: ghcr.io/sholex-team/lilsholex:5.8
    command: "celery -A LilSholex worker -Q celery -l info -c 2 -E"
    networks:
      - db_django
      - django_internet
      - tasks_django
    secrets:
      - db_password
      - secret_key
      - webhook_token
      - persianmeme_token
      - persianmeme_channel
      - persianmeme_reports
      - persianmeme_help_messages
      - persianmeme_logs
      - persianmeme_messages
      - domain
    volumes:
      - type: volume
        source: state
        target: /home/sholex/state
    depends_on:
      - db
      - migrations
      - rabbitmq
    deploy:
      replicas: 1
      placement:
        preferences:
          - spread: node.labels.zone
        constraints:
          - node.labels.task_master==true
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: rollback
        monitor: 10s
        order: stop-first
      rollback_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
        monitor: 10s
        order: stop-first
      restart_policy:
        condition: any
        max_attempts: 3
        window: 10s
        delay: 5s
  celery_flower:
      <<: *celery_base
      command: "celery -A LilSholex flower --url_prefix=flower"
      depends_on:
        - celery
      environment:
        FLOWER_BASIC_AUTH: "sholex:flower_password"
      networks:
        - nginx_lilsholex
        - db_django
        - django_internet
        - tasks_django
  lilsholex_broadcasts:
    image: ghcr.io/sholex-team/lilsholex:5.8
    command: "python manage.py process_broadcasts"
    networks:
      - db_django
      - django_internet
    secrets:
      - db_password
      - secret_key
      - webhook_token
      - persianmeme_token
      - persianmeme_channel
      - persianmeme_reports
      - persianmeme_help_messages
      - persianmeme_logs
      - persianmeme_messages
      - domain
    depends_on:
      - db
      - migrations
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.task_master==true
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: rollback
        monitor: 10s
        order: stop-first
      rollback_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
        monitor: 10s
        order: stop-first
      restart_policy:
        condition: any
        max_attempts: 3
        window: 10s
        delay: 5s
  memcached:
    image: memcached:1.6.23
    command: "memcached -m 256"
    networks:
      - cache_django
    deploy:
      replicas: 1
      placement:
        preferences:
          - spread: node.labels.zone
        constraints:
          - node.labels.cache==true
      restart_policy:
        condition: any
        max_attempts: 3
        window: 20s
        delay: 10s
      update_config:
        parallelism: 1
        delay: 2s
        failure_action: rollback
        monitor: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
        monitor: 10s
        order: start-first
  lilsholex_migrations:
    image: ghcr.io/sholex-team/lilsholex:5.8
    command: "bash -c 'yes | python manage.py makemigrations persianmeme && \
    yes | python manage.py migrate && python manage.py collectstatic --noinput'"
    secrets:
      - db_password
      - secret_key
      - webhook_token
      - persianmeme_token
      - persianmeme_channel
      - persianmeme_reports
      - persianmeme_help_messages
      - persianmeme_logs
      - persianmeme_messages
      - domain
    depends_on:
      - db
    networks:
      - db_django
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.db==true
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
        monitor: 10s
        order: stop-first
      rollback_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
        monitor: 10s
        order: stop-first
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 10s
        delay: 15s
    volumes:
      - ./static:/home/sholex/static
      - type: volume
        source: persianmeme
        target: /home/sholex/persianmeme/migrations
networks:
  db_django:
    driver: "overlay"
    name: "db_django"
    internal: true
  nginx_lilsholex:
    driver: "overlay"
    name: "nginx_lilsholex"
    internal: true
  cache_django:
    driver: "overlay"
    name: "cache_django"
    internal: true
  django_internet:
    driver: "overlay"
    name: "django_internet"
  tasks_django:
    driver: "overlay"
    name: "tasks_django"
    internal: true
volumes:
  db:
    name: "db"
  persianmeme:
    name: "persianmeme"
  nginx:
    name: "nginx"
  state:
    name: "state"
  rabbitmq_dump:
    name: "rabbitmq_dump"
secrets:
  db_password:
    external: true
  persianmeme_channel:
    external: true
  persianmeme_token:
    external: true
  persianmeme_logs:
    external: true
  persianmeme_messages:
    external: true
  persianmeme_reports:
    external: true
  persianmeme_help_messages:
    file: ./secrets/help_messages.json # Replace file_id of animations.
  secret_key:
    external: true
  webhook_token:
    external: true
  ssl_certificate:
    file: ./ssl/fullchain.pem
  ssl_key:
    file: ./ssl/privkey.pem
  dhparam:
    file: ./ssl/dhparam.pem
  domain:
    external: true
configs:
  nginx:
    file: conf/nginx.conf # Update Nginx config
  mysql:
    file: conf/my.cnf # Change MySQL configuration based on your host.
  rabbitmq:
    file: conf/rabbitmq.conf
